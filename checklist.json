{
    "team": [
        {
            "theme": "team",
            "id": 1,
            "type": "チーム構成と権限委譲",
            "metrics": "システムを開発するチームの人数は、5人以上12人以下か。（ピザ２枚ルール）",
            "learning": "ある特定の人物に属人化した仕事を洗い出し、減らしていく仕組みや習慣がチームにあるか。",
            "practice1": "チームとチームメンバーの権限について、RACI図やデリゲーションポーカーなどによって、可視化され共有されているか。",
            "practice2": "チームは価値提供をするのに必要な全職能のメンバーで構成されているか。(フィーチャーチーム)",
            "practice3": "チームおよびチームリーダーは、チームのミッションのために必要な外部のリソースを調達するための予算や権限をもっているか。",
            "antipattern1": "チームは存在するが、それぞれのやっている仕事の内容をよく知らないし、代わりにやることもできない。",
            "antipattern2": "チームリーダーが複数のチームやプロジェクトを兼務しており、自チームのためにすべての時間を使うことができない。",
            "antipattern3": "チームリーダーがメンバーに権限委譲できておらず、ボトルネックになっている。",
            "desc": "メンバーが多すぎるチームも少なすぎるチームも、管理を複雑にするばかりでなく、生産性を悪化させてしまうことが知られています。\n\nまた、高速に仮説検証を行うためには予算・意思決定・実行能力を１つのチームで保つ必要があります。"
        },
        {
            "theme": "team",
            "id": 2,
            "type": "チームビルディング",
            "metrics": "チームは少なくとも半年以上継続して存在しているか。",
            "learning": "チームは月に一度以上の頻度で仕事のふりかえりをおこなっており、その際にプロジェクト憲章またはインセプションデッキの認識を揃えているか。",
            "practice1": "インセプションデッキまたはプロジェクト憲章を作成し、チームの存在理由についてチーム全員が把握しているか。",
            "practice2": "新しくチームに参画するメンバー用のオンボーディング・デック（チームの一員として働き始めるための、価値観・実務・スキル・相互理解のための明文化されたドキュメント集）が存在するか。",
            "practice3": "チームメンバー全員で定期的にカジュアルにコミュニケーションをとる場がある（ランチ、ディナー、レクレーション等）",
            "antipattern1": "オンボーディングプログラムが、文章を読むだけのものになっており、ハンズオンやミッション理解の伴わない形骸化したものになっている。",
            "antipattern2": "1年以上チームのやることが変わっておらず、チームメンバーも固定されている。",
            "antipattern3": "チーム内でチームミッションの改善に関係する議論がどんな理由であれ発生していない。",
            "desc": "システムを改善するチームは、組成してからパフォーマンスするまでに時間がかかります。\n\n多くの場合、継続的に同じメンバーで構成されることで、学習が進み高速な開発が実現できるのです。一方で、あまりに長い期間同じメンバーでも属人化や改善のサイクルが止まってしまいます。"
        },
        {
            "theme": "team",
            "id": 3,
            "type": "心理的安全性",
            "metrics": "チームメンバーの心理的安全性を測る指標があり、定期的に計測しているか。",
            "learning": "1on1や、落ち着いた場面でのオフサイトミーティングなどの直接業務に関わらないキャリアやタスクの壁打ちを、月に１度程度は実施しているか。",
            "practice1": "チームメンバーの行動（成果ではなく）/発言を明示的に承認行動をとる習慣があるか。（行動したこと自体に対して、拍手する・感謝を述べるなど）",
            "practice2": "チームメンバー間で挨拶をしたり、雑談をする習慣はあるか。",
            "practice3": "チームの不安や不満などを可視化し、吸い上げるための仕組みを持っているか。",
            "antipattern1": "ミッションや共通のゴール設定をしないまま意見を集め、課題のためというよりも個人のための意見しか出てこない状況になっている。",
            "antipattern2": "心理的安全性を仲の良さと捉えて、事業のための意見ではなく、仲良くすることが目的化しているため、意見を封殺してしまう。",
            "antipattern3": "事業目標や納期目標に対して、威圧的なマネジメントや権威的な命令を繰り返したことで、意見が出てこない状況になっている。",
            "desc": "チームメンバーが相互に自分の意見を言ったとしても、不利益を受けることがないという環境がソフトウェア開発の生産性につながることが知られています。\n\nこのような状態を心理的安全といいます。心理的安全性について、継続的に投資することはチームの生産性に投資することにつながります。"
        },
        {
            "theme": "team",
            "id": 4,
            "type": "タスクマネジメント",
            "metrics": "アイデアレベルの要望や構想から、要件に落ちるまでのリードタイムは計測されているか。",
            "learning": "仕事を始めるための定義と、完了するための定義はチームやステークホルダーで定期的に見直されているか。",
            "practice1": "上長やステークホルダーを含め、共通のタスク管理ツールを利用しており、プロジェクトの状況を可視化したダッシュボードに常にアクセス可能か。",
            "practice2": "チームが仕事を始めるために必要な課題やタスクの粒度について、明文化されたフォーマットが存在するか。",
            "practice3": "チームのタスクに関して、「完了の定義(Definition of DONE)」が存在するか。",
            "antipattern1": "他部署からの依頼が明確なタスクツールではなく、担当者へのダイレクトメール/メッセージ/口頭など透明性のない形で行われている。",
            "antipattern2": "どのチームタスクであるかが曖昧なとき、ボールが落ちないようにするための仕組みや文化が存在しない。",
            "antipattern3": "どのチームタスクであるか曖昧な仕事が発生したあとに、事後検証（ポストモーテム）が行われず都度話し合いで解決している。",
            "desc": "チーム全体で、タスクが明文化されないまま口頭などでのやり取りが多かったり、曖昧な要求が多いとそれだけ手戻りの手間が生じてしまいます。\n\n明文化しきれないことも多々ありますが、継続的に基準をアップデートすることで、ムラのない仕事のスピードを得ることができます。"
        },
        {
            "theme": "team",
            "id": 5,
            "type": "透明性ある目標管理",
            "metrics": "１年後などのチームとプロダクトの目指す姿が、言語化され、いくつかの計測可能な指標により明晰化されているか。",
            "learning": "仮説的な目標に対して、うまくいかなかった際にチームとして「学んだこと」を言語化・他チームへ公開・学習しているか。",
            "practice1": "四半期にフォーカスすべき目標が言語化され、いくつかの計測可能な指標によって明晰化されているか。",
            "practice2": "四半期にフォーカスすべき目標に対して、どのようにアプローチするのかの計画をチームで共有しているか。",
            "practice3": "ビジネス上、重要なマイルストーンとそのスケジュールをチームで常に共有し、その進捗を確認しているか。",
            "antipattern1": "目標管理が強く評価制度に結びついているため、ストレッチしたゴール設定をすることが難しくなっている。",
            "antipattern2": "目標項目の一部に、その達成手段が健全に行われているかをチェックするための目標を立てていない。",
            "antipattern3": "目標が定量的でなく、第三者からみて達成度合いが不明確なものになっている。",
            "desc": "強いチームを支えるのは明確な目標管理です。たとえば、OKRはそれを支えるツールになりえます。\n\n目標はノルマではなく創造性を生み出すためのツールです。そのため、天下り的な数字のブレイクダウンではなく、仮説とフォーカスをはっきりさせる必要があります。"
        },
        {
            "theme": "team",
            "id": 6,
            "type": "経験主義的な見積りと計画",
            "metrics": "チームのベロシティを把握しており、その分散値の変化を計測しているか。",
            "learning": "見積りと実績の履歴を元に、見積りの精度を向上させるための方法について定期的な学習/ふりかえりを行なっているか。",
            "practice1": "見積りは、実際にその仕事を行う本人を含むチームで行われているか。",
            "practice2": "スケジュールがクリティカルなプロジェクトでは精密に、仮説検証や価値がクリティカルなプロジェクトでは粒度を荒くするなどして、状況に応じて見積りや計画の方法を変えているか。",
            "practice3": "見積りと実績の履歴を元に、見積りの精度を向上させるための方法について定期的な学習/ふりかえりを行なっているか。",
            "antipattern1": "スケジュールのバッファ（緩衝期間）を全体計画に対して25%以上確保していない。",
            "antipattern2": "機能要件のバッファ(緩衝機能)を全体計画に対して設けておらず、「必須な機能」と「あったらよい機能」を分類していない。",
            "antipattern3": "相対見積もりによって得られたベロシティの数値自体を、生産性の指標にしており、数値的なコミットメントや改善が要求されている。",
            "desc": "アジャイルプロセスにおいては、計画や見積りを行わないという誤解を持っていることがあります。\n\n本来は実験を繰り返すことで精度を高めながら、プロジェクト予測の正確性をたかめていくための計画管理を行うことが多いのです。ミッションにおうじて適切な手法を選べる能力があるかを調査します。"
        },
        {
            "theme": "team",
            "id": 7,
            "type": "ふりかえり習慣",
            "metrics": "ふりかえりのテーマごとに数字を計測し、ファクトベースで議論できるようにしている。",
            "learning": "チームのメンバーは、チームで合意した1カ月以内のサイクルでふりかえりを実施しているか。",
            "practice1": "ふりかえりの場はチーム全員が参加しているか。",
            "practice2": "ふりかえりはテーマを定め、議論を行い次回のふりかえりまでに実行可能なタスクが切り出されているか",
            "practice3": "ふりかえりにおいて前回のふりかえりで改善するために起案したタスクが実行されたか検証しているか",
            "antipattern1": "ふりかえりをしていたが、しばしば意見が出なかったため、ふりかえり自体をやめた。",
            "antipattern2": "ふりかえるべきテーマに関しての、起きた出来事を時系列に事実関係を整理するなどの準備をせずにふりかえりをすすめている。",
            "antipattern3": "ふりかえりに適切なファシリテーターがいない。",
            "desc": "チーム活動において、ふりかえりは最も基礎的で最も重要な習慣です。\n\n一方で当たり前すぎるために議論が発散したり、マンネリ化を招いてしまうことがあります。\n\nテーマを決めて事実に基づいたふりかえりを行う習慣があるかを検査します。"
        },
        {
            "theme": "team",
            "id": 8,
            "type": "バリューストリーム最適化",
            "metrics": "チームのリードタイム、フロー効率性および各工程のサイクルタイムを継続的に計測しているか。(またはエンジニアリングインテリジェンスのサービスを利用している)",
            "learning": "チームのバリューストリームマッピングを作成し、繰り返しボトルネックを把握しながら自動化と学習を繰り返しているか。",
            "practice1": "バリューストリーム改善のために、開発リソースの10%以上を継続的に確保しているか。",
            "practice2": "設定ファイルや一部のソースコードに対して、エンジニアでなくても必要に応じて修正のためのPull Request(Merge Request)を投げることがあるか。",
            "practice3": "ペアプログラミング/モブプログラミングを実施しているか。",
            "antipattern1": "属人的なタスクがある状態を効率的だと解釈して改善をしない。",
            "antipattern2": "フロー効率性などの数値指標に囚われすぎて、全体のリソース効率が悪化したり、価値提供に結びつかない状態になっている。",
            "antipattern3": "数値改善のために簡単で予測可能な仕事ばかりを引き受け、難しめのタスクを引き受けない。",
            "desc": "高速な仮説検証サイクルを行うチームにおけるマネジメントは、一時的なプロジェクトとしてのタスク管理やスケジュールの管理ではなく、継続的にすばやく機能を仮説検証することができるのかという効率性を重視します。\n\nそのため、各工程でのサイクルタイムやリードタイムを計測し、それらを短くするように活動します。"
        }
    ],
    "system": [
        {
            "theme": "system",
            "id": 1,
            "type": "バージョン管理",
            "metrics": "バージョン管理システムの履歴情報(Code Churn)の分析をもとにバグ予測や品質上の問題を指摘するツールを導入し、継続的に改善しているか。",
            "learning": "明文化されたブランチ戦略が存在するか。そして、それは守られているか。",
            "practice1": "すべてのアプリケーションコードをGit/GitHubなどのバージョン管理システムで自社管理しているか。（権利を有する全てのソースコードについて、自社が管理するバージョン管理システムで扱っているか）",
            "practice2": "インフラ構成とシステム要素のプロビジョニングをソースコードとして実行可能な形式にした上で、バージョン管理システムで管理しているか。（Infrastructure as Code）",
            "practice3": "統合テスト/デプロイメントの自動化に関わるソースコードをアプリケーションコードと同一のバージョン管理システムで管理しているか。",
            "antipattern1": "ソースコード自体のセキュリティレベルを高く設定しており、開発支援系SaaSの利用を禁止している。",
            "antipattern2": "バージョン管理システムが複数存在していたり、１つのツールからすべての履歴を閲覧することができないなど、中途半端な状態のままになっていないか。",
            "antipattern3": "システムのソースコードの閲覧を関連するエンジニアのみに限定している。（別チームのエンジニアや他のステークホルダーが閲覧できない。）",
            "desc": "ソースコードのバージョン管理は、最も基礎的な開発者の習慣です。\n\nこのような習慣がない場合、共同でソフトウェアを開発すること自体が困難になり、属人化したノウハウや暗黙的なルールの温床になりえます。また、GitHubなどのサービスはさまざまな開発者向けツールの起点となる重要な基盤でもあります。"
        },
        {
            "theme": "system",
            "id": 2,
            "type": "ソースコードの明確さ",
            "metrics": "アプリケーションコードの循環的複雑度などのメトリクスを、ツール/サービスを用いて継続的に計測しているか。",
            "learning": "デッドコードを四半期以上のサイクルで定期的に棚卸しし、削除や分解をしているか。",
            "practice1": "コードレビューをする習慣や規則があり、masterブランチへのマージはコードレビューを必須としているか。",
            "practice2": "明文化されているコードレビューガイドラインが存在するか。",
            "practice3": "コードレビューガイドラインを満たさないコードを自動的に検出・補正する各種Linterやフォーマッタなどのツール群を整備しており、ソースコードを変更する誰もが使うことができるか。",
            "antipattern1": "コードレビューを行うことができる人物がチームの中におらず、レビュー待ちに1、2営業日がかかる。",
            "antipattern2": "コードレビューガイドラインは１年以上メンテナンスされておらず、形骸化している。",
            "antipattern3": "コードレビューガイドラインの多くの項目が、自動的なフォーマッタなどで統一・解決可能な些末な事柄である。",
            "desc": "複雑なソースコードは、それだけで自動的なテストを難しくし、バグや障害を生み出しやすいだけでなく、開発者のモチベーションや生産性に悪影響を与えます。\n\nソフトウェアが経営から不可視である要素から、内部的な品質が軽視される傾向があるため、十分な注意をはらい続ける必要があります。"
        },
        {
            "theme": "system",
            "id": 3,
            "type": "継続的インテグレーション",
            "metrics": "すべてのインテグレーションテストにかかる時間が計測されており、それは30分以内に完了するか。",
            "learning": "テストカバレッジ基準や自動テストガイドラインを用意し、これらを継続的に改善するための工数がチームで割かれているか。",
            "practice1": "プロダクトの半分以上のモジュール/クラスファイルに対して、ユニットテストが存在しているか。",
            "practice2": "テスト用データやスタブ/モックなどを整備し、テストを書きやすくするための環境整備をしているか。",
            "practice3": "継続的インテグレーション環境が存在し、開発者は開発ブランチの全テストをリソース調整することなく、自由に行うことができるか。",
            "antipattern1": "一部の人だけがテストを書き、一部の人はテストを書かないといったように自動テスト習慣を個々人の努力目標などになっている。",
            "antipattern2": "テスト自体が複雑になって、長期間メンテナンスされていない。",
            "antipattern3": "自動テストが失敗したまま、そのコードが本番デプロイされることを許容している。",
            "desc": "継続的インテグレーションとは、自動的で定期的に実施される結合テスト環境のことです。\n\nこの環境が簡単でかつ信頼できるほど、開発者は、誰かの手作業によるテストを待つ必要がなくなり、自分の手元でソースコードの改善を繰り返しやすくなります。これは生産性と品質向上に寄与します。"
        },
        {
            "theme": "system",
            "id": 4,
            "type": "継続的デプロイ",
            "metrics": "デプロイ頻度とデプロイ成功率を継続的に測定しており、これらを改善することを目標管理しているか。",
            "learning": "デプロイ時に社内のユーザーや開発者のみを対象もしくは、一部のサーバのみにサービスをリリースしてエラーがないかを確かめるカナリアリリースができるか。",
            "practice1": "デプロイ完了時、および構成変更時にインフラ構成に関する自動的なテスト(e2eのスモークテストおよびServerspecなどのインフラ環境テスト)を実行しているか。",
            "practice2": "ブルーグリーンデプロイメントができるか。（稼働中のサーバーを切り替えるのではなく、別環境にデプロイ作業をしてから本番の向き先を切り替えるデプロイ手法。）",
            "practice3": "デプロイ作業を伴わず、一部の機能を安全にオフにしたり、オンにしたりすることができるか。( Feature Toggle /Soft Launch/ Dark launchなどの仕組みを導入・実装しているか。)",
            "antipattern1": "デプロイされたコードに問題が発生した際に、前のバージョンへの切り戻しを意思決定してから5分以内に切り戻すことができない。",
            "antipattern2": "開発者のメンバー自身が、権限を持つ人物の承認があっても、自分のコードを本番環境にデプロイすることができない。",
            "antipattern3": "デプロイ工程が自動化されておらず、本番反映に1時間以上かかっていたり、特定の時間帯しかできないなどの制約事項がかかっている。",
            "desc": "継続的デプロイとは、完成したソースコードを自動的かつ簡単・安全にサービスインするための仕組みです。\n\nこの環境への投資が整っていない場合、開発者は本番環境のリリースのたびに様々な作業負荷がかかり、仮説検証や継続的な品質改善に対しての足止めになってしまいます。"
        },
        {
            "theme": "system",
            "id": 5,
            "type": "API駆動開発",
            "metrics": "社内外のAPIの利用者にとってのユーザビリティについてヒアリング/アンケートを行い継続的な改善が行われているか。",
            "learning": "各APIについて、動作するインタラクティブなドキュメントや管理サービスを持っているか。",
            "practice1": "プロダクトに対して外部あるいは内部の別のシステムと連携するためのネットワーク経由APIが提供されているか。",
            "practice2": "APIは何らかのSchema定義言語によって規定され、そこから自動的にクライアントの生成やバリデータの生成が行われているか。",
            "practice3": "APIに関わる要件は、SDD(スキーマ駆動開発)で開発され、直ちにモックアップサーバーが提供できるか。",
            "antipattern1": "ViewやControllerの層に処理が集中しており、機能をAPIに切り出すことが困難な設計になっている。",
            "antipattern2": "各APIに対して、ネットワークを経由したE2E(ステージング・本番どちらに対するE2Eテストかは問わない)のテストが存在しておらず、死活監視ができていない。",
            "antipattern3": "APIがバージョン管理されておらず、破壊的な変更が利用者から検知できない。",
            "desc": "ネットワーク経由のAPIを基準にシステムを開発することで、他のシステムと連携しやすくなります。\n\nまたシステムがレガシー化した際に交換したり、改善したりといった手が打ちやすいものになります。\n\n人が使う見た目の作りだけでなく、エンジニアにとっての作りが質を生み出します。"
        },
        {
            "theme": "system",
            "id": 6,
            "type": "疎結合アーキテクチャ",
            "metrics": "目指すべきアーキテクチャに対してそぐわない点を洗い出すための仕組みが存在しており、それらの情報をもとに改善を進めているか。（アーキテクチャ適応度関数）",
            "learning": "システムアーキテクチャの決定・変更・改善に関するドキュメントを管理し継続的な学習機会を設けているか。",
            "practice1": "ドメインイベントの発火に伴いPublish/Subscribeモデルを利用した仕組みで、関連サービスとの連携が可能か。またその履歴データが保存管理され、これらのイベントリプレイから再突合や監査の自動化が可能か。",
            "practice2": "結果整合性を考慮したサービスレベルの合意が要件のガイドラインの中に組み込まれているか。",
            "practice3": "バッチ、ジョブ、プロシージャに対する冪等な設計ガイドラインが存在しており、再送によって整合性が担保できるようなシステムになっているか。",
            "antipattern1": "１つのデータベースに対して複数のシステムからの直接的な参照または書き込みがなされていて、それらの依存性が簡単には追跡できない状況になっている。",
            "antipattern2": "疎結合なシステムであるが、分散トレーシングの仕組みがなく、問題発生時の原因特定に時間がかかる。",
            "antipattern3": "自動テストとスキーマ定義の存在しない外部システムとの依存性が１０個以上存在しており、機能開発の影響範囲を特定できない。",
            "desc": "システムの役割は単純であればあるほど、高速に改善しやすくなります。\n\n複雑な問題を解くときに単純な問題野組み合わせにするというのは重要な設計技術です。\n\n疎結合なアーキテクチャとは、このように改善する単位を単純に保つための技術です。"
        },
        {
            "theme": "system",
            "id": 7,
            "type": "システムモニタリング",
            "metrics": "SLI/SLO/エラーバジェットがビジネスオーナーとエンジニアが協議して合意の上設定され、計測されているか。",
            "learning": "開発と SRE が共有する障害報告リストがあり、それぞれに有効な再発防止の仕組みが整うようにリソースを割いているか。",
            "practice1": "APMのためのSaaSやツールが導入され、ユーザーからみた応答速度などについて、要因ごとの影響度を定常的に分析できる状態になっているか。",
            "practice2": "フォルトインジェクションテストや、カオスエンジニアリング等の仕組みを導入することで、重大事故につながるかもしれないシステムの欠陥を早期に発見するための試みをおこなっているか。",
            "practice3": "オートスケールなどの仕組みにより、開発者やSREが介在しなくても、適切なキャパシティコントロールができているか。",
            "antipattern1": "障害の発生に対しての罰則や謝罪などの、開発者が萎縮したり障害を隠蔽する方向につながるような慣習が存在する。",
            "antipattern2": "定常的に発生しているサービス上の警告を問題ないものとして無視したり、ログ自体を出さないようにしている。",
            "antipattern3": "システム構成要素の構築方法や運用方法が属人化しており、同じインスタンスを構築することができない。",
            "desc": "システムの品質は、エラーや障害などから学び改善していくことで生まれます。\n\nそのためには、エラーや障害について検知し、復旧するためのモニタリングとその改善を支援するための文化と技術が必要になります。\n\nミスを許さない懲罰的な文化のもとでは、重大事故が起きやすくなります。"
        },
        {
            "theme": "system",
            "id": 8,
            "type": "セキュリティシフトレフト",
            "metrics": "CI/CDのパイプラインにソースコードの自動的なセキュリティチェック（静的解析または動的解析）が組み込まれていて、一定の基準を達さないとリリースされない仕組みになっているか。",
            "learning": "セキュアコーディングについて、開発者を対象にした教育カリキュラムや研修を実施しているか。",
            "practice1": "専門的なアプリケーションセキュリティの知識を持つメンバーが、専任でセキュリティチームにおり、動向や最新情報をもとに自社サービスをレビュー・改善できているか。",
            "practice2": "OSSのライブラリやミドルウェアを使用する際、それらの脆弱性情報を自動的モニタリング・警告・パッチ適用するための仕組みまたはサービス等を利用しているか。",
            "practice3": "4半期から1年の間で定期的に、全体的なアプリケーションとインフラの脆弱性診断を受けているか。",
            "antipattern1": "開発速度（デプロイ頻度）を低下させるようなセキュリティルールが、施行されていて現況に合わせたアップデートが行われていない。",
            "antipattern2": "ソースコード中に、漏洩してはならない情報がハードコーディングされている。（それらを分離して管理するようなツールまたは仕組みを導入しているか）",
            "antipattern3": "開発企画要件の段階で、設計レベルのセキュリティレビューが実施されていない。(Security by Designの未実施)",
            "desc": "ソフトウェアが完成したあとにセキュリティの課題が見つかると、そのために対応に追われたり、リリースが遅れたりと良いことがありません。\n\nできる限り早い工程でセキュリティの課題を見つけ出す技術と文化を、DevSecOpsあるいはセキュリティのシフトレフトと言います。"
        }
    ],
    "data": [
        {
            "theme": "data",
            "id": 1,
            "type": "顧客接点のデジタル化",
            "metrics": "デジタルな手段で行動履歴データを分析可能な形で保存している顧客が全体の7割を超えているか。",
            "learning": "オンライン・オフラインの両方で、顧客の接点となる行動情報や通知の手段を獲得するためのシステムを開発している組織が社内に存在するか。",
            "practice1": "オンライン上で、顧客は自社のサービスを契約したり購入したりできるか。",
            "practice2": "自社サービスやメディアをスマートフォン用のWebサイトまたはアプリとして提供しているか。",
            "practice3": "潜在顧客獲得のために自社メディアやSNSを通じたエンゲージメント活動をしているか。",
            "antipattern1": "デジタル上でのプッシュマーケティングをEmailのみに頼っている。",
            "antipattern2": "自社のリアルな顧客接点からのデータ収集が技術的な課題・社内ルール・オペレーションの問題でできていないままになっている。",
            "antipattern3": "顧客接点のサービス開発がうまく機能していないため、改善の速度やデータの取得が遅延している。",
            "desc": "B2CでもB2Bでも、顧客接点がデジタル化していないと、データと顧客を結びつけることが難しくなります。\n\nデータ利活用のポイントは、顧客接点に十分コントロールできるシステムが提供できているかが第一歩になります。これは、オンラインに限らず、リアルな接点であっても様々な手段でデジタル化をすることが可能です。"
        },
        {
            "theme": "data",
            "id": 2,
            "type": "事業活動データの収集",
            "metrics": "事業活動のデータが集計されてから、解析された状態で閲覧可能になるまでのリードタイムは1日以内か。（BIツールで昨日のデータは見られるか。）",
            "learning": "事業活動の中に潜在的に存在するデータを収集するためのシステム化や業務分析を行うチームは存在するか。",
            "practice1": "外部事業者との取引情報について構造化されたフォーマットでリアルタイムにデータレイクに保存しているか。",
            "practice2": "POSや業務システム上のアクセス記録/操作履歴を構造化されたフォーマットでリアルタイムにデータレイクに保存しているか。",
            "practice3": "音声・動画・文章といった従来構造化できなかったデータソースも事業利活用のために収集しているか。",
            "antipattern1": "データ収集プロジェクトが依頼したデータ記入が、現場で実施されていない。",
            "antipattern2": "データの活用に関して責任のあるポジションを設置していない。",
            "antipattern3": "データ収集に関するプロジェクトが存在しないか、進捗していない。",
            "desc": "データを中心とした価値創造を行うためには、顧客と事業の活動データが必要になります。\n\nデータ収集がまだまだの状態で企業活動をデジタル化していくことは困難になります。\n\nこの点がどれだけ進んでいるかをチェックします。"
        },
        {
            "theme": "data",
            "id": 3,
            "type": "データ蓄積・分析基盤",
            "metrics": "データ分析の基盤実際に操作して数字を取得することができる社内の人数と部署数を増やしていくための活動をしているか。",
            "learning": "データ分析基盤をデータ分析基盤を職種を問わず使ってもらうために、簡単な分析をするためのプログラミングや操作の仕方をエンジニア以外のステークホルダーに対しても教育しているか。",
            "practice1": "ユーザー理解や仮説検証のためのデータ分析のための環境が整備されており、データサイエンティストだけでなくエンジニア・非エンジニアをとわず、プロダクトのステークホルダーに公開されているか。",
            "practice2": "イベントストリーム処理の基盤を用いてオンライン情報を利用した分析・サービスでの活用をおこなっているか。",
            "practice3": "データ分析において、個人情報をマスキングする機構が存在しているか。",
            "antipattern1": "事業システムのデータベースに直接アクセスして、分析用の処理を走らせている。",
            "antipattern2": "統一されたデータレイク(未処理のローデータ保管場所)が存在せず、分析基盤ごとにデータを管理している。",
            "antipattern3": "利用中の外部サービスにリアルタイムにデータ連携するための機構が存在しない。",
            "desc": "蓄積された生のデータは、構造化され、整理された上でデータ分析に使いやすい形のクラウドサービスなどのデータ分析基盤に格納されます。\n\nこれによって、データ分析のためのビッグデータ処理について知見があまりないエンジニアや関係者であってもデータを取得することができます。"
        },
        {
            "theme": "data",
            "id": 4,
            "type": "データ処理パイプライン",
            "metrics": "分析・開発や運用のバリューストリーム上の各種サイクルタイムを計測しており、継続的に改善しているか。",
            "learning": "データレイクから、モデルの実サービス適用までの一連の流れのパフォーマンスモニタ・自動化・効率化を行うエンジニアリングチームが存在するか。",
            "practice1": "データレイクから、データ分析基盤までのETL処理にも自動テストが存在しており、変換エラーなどがモニタリングされているか。",
            "practice2": "実運用されているデータ分析・学習のための前処理や学習処理を実行するためのワークフロー処理基盤(ETLの一貫性・冪等性・可用性を確保するための基盤)が存在するか。",
            "practice3": "学習済みのモデルを検証し、サービスインするまでの処理は自動化されているか。",
            "antipattern1": "週次集計や月次集計の処理が特定の日時に終わることを想定しており、障害が発生した場合にデータが欠損してしまう。",
            "antipattern2": "実験時の環境を実サービス環境に向けてポータブルにするためのコンテナ化やIaC(Infrastructure as Code)が存在しない。　",
            "antipattern3": "データサイエンス/機械学習/データアプリケーションエンジニアリング/クラウドインフラなどの知見が１名に属人化している。",
            "desc": "データ分析基盤から取得したデータをもとに機械学習や統計処理を利用したアプリケーションを実装するには、試行錯誤の実験フェーズとは異なる知見が必要になります。例えば、スケールして安定したデータ処理を行うワークフローパイプラインの基盤を作るなどです。\n\nこのような一般にMLOps/DataOpsと呼ばれる領域に関わる項目をチェックします。"
        },
        {
            "theme": "data",
            "id": 5,
            "type": "データ可視化とリテラシー",
            "metrics": "プロダクトの主要情報のダッシュボードが、常に表示された共用のモニターをチームの座席近辺に配置しているか。(または常に意識されるように運用されているか。)",
            "learning": "意思決定者は、データの読み取り方や統計の基本的な知識について研修トレーニングを受けているか。",
            "practice1": "売上などの短期的数値ではなく、長期的な事業価値のための間接的指標（e.g.顧客リピート率や予測LTVなど)を主要なKPIとして設定しているか。",
            "practice2": "データ集計・表示のためのBIツールを導入しており、エンジニア以外でも使うことができているか。",
            "practice3": "データから得られた推論や仮説が間違っている場合にどのようなデータによって検証可能かをもとにデータ収集や分析が行われているか。",
            "antipattern1": "要望ベースでデータの集計を繰り返し、雑多なレポーティング項目が棚卸しされていない。",
            "antipattern2": "簡単なデータ集計であっても、エンジニアを経由しなければ取得することができない。",
            "antipattern3": "ダッシュボードは存在するが、データ担当者以外誰も見ておらず形骸化している。",
            "desc": "データ駆動経営を行うためには、データの適切な可視化とそれを解釈するリテラシーの両面が必要になります。\n\nしばしば、データの取得や可視化を一部のエンジニアしか行うことができず、高速なサイクルを阻害してしまいます。\n\nそこで、意思決定者自身がデータを直に取り扱えるのかをチェックします。"
        },
        {
            "theme": "data",
            "id": 6,
            "type": "機械学習プロジェクト管理",
            "metrics": "機械学習プロジェクトの具体的な成功指標を持ち、構築したシステムがそれを満たしているかモニタリングしているか。",
            "learning": "機会学習の知見を、アプリケーション開発者や非エンジニアのスタッフが利用できるように勉強会などを繰り返し開いているか。",
            "practice1": "継続的再学習のためのモニタリングと、自動的なモデルのアップデート等の効率的な保守を実現するための仕組みを導入しているか。",
            "practice2": "実運用時の計算量や計算資源の種別（IoT/エッジ利用/クラウド）などを考慮に入れた上で、モデル選定や実験のプロセスが動いているか。　",
            "practice3": "事業価値と実現可能性の両面を同時に仮説検証できるようなプロジェクト管理(PoCとプロトタイプ作成)を行っているか。　",
            "antipattern1": "機械学習チームと事業担当者との間で、事業理解や背景・目的の共有などの時間を十分に設けていない。",
            "antipattern2": "すでに実績のあるクラウドを利用した機械学習ソリューションに対して、検証ができていない。",
            "antipattern3": "機械学習プロジェクトのPoCから実運用するためのエンジニアリング能力をチームが持っておらず、そこから実サービス化が進まない。",
            "desc": "機械学習のプロジェクトは、モデルの発見と顧客価値、サービスデプロイメント時の課題など複数の不確実性に対して適切なマネジメントが要求されます。\n\nこのことへの理解や組織学習が進んでいないと、PoCから成果が出なかったり、データエンジニアが離職してしまったりします。"
        },
        {
            "theme": "data",
            "id": 7,
            "type": "マーケティング自動化",
            "metrics": "マーケティングのオペレーションの業務の割合と企画・戦略の業務割合を棚卸しして、自動化・最適化のためのリソースを割いているか。",
            "learning": "インハウスのマーケティングチームに自動化や分析を行うエンジニアがおり、指標や自動化をともに勧めているか。",
            "practice1": "カスタマージャーニーの複数の接点において顧客の行動を把握、理解するため、何らかのDMPツールを導入しているか。",
            "practice2": "媒体ごとに適切なクリエイティブになるようにA/Bテストやバンディッドアルゴリズムなどで最適化しているか。",
            "practice3": "各施策ごとに獲得した顧客がその後のどのような購買行動/利用行動ができたかをコーホート分析しているか。",
            "antipattern1": "獲得した顧客に対して、一括配信などの画一的な通達を行っており、投資効果の最適化を実施していない。",
            "antipattern2": "顧客獲得に対して、一時的な獲得総数のみを目標としており、継続的な利用についてを調査していない。",
            "antipattern3": "広告運用の成果報告がフォーマットに沿って自動的に行えるようになっていない。",
            "desc": "見込み顧客の獲得から、関係性の構築、ナーチャリング、見込み度合いの高い顧客に対してのリテンション、顧客の再訪の促進などのようにマーケティング活動にはさまざまな工程があります。\n\nその一部をデータとシステムを用いて自動化することで、人にしかできない戦略的な事柄にフォーカスできるようになります。"
        },
        {
            "theme": "data",
            "id": 8,
            "type": "自動的な意思決定",
            "metrics": "自動化が進捗するために、判断基準が明確な目標を掲げているか。",
            "learning": "意思決定や業務を自動化していくために、業務プロセスを改善するためのソフトウェアエンジニアを含むチームが存在するか。",
            "practice1": "意思決定に関する記録を、プロセスマイニングができる形で保存しているか。",
            "practice2": "意思決定理由について、明確な根拠やガイドラインを作る時間をマネジメントは割いているか。また、ガイドラインの中に倫理規範は含まれているか。",
            "practice3": "ビジネスプロセスやミーティングを棚卸しし、不要なもの・従来の用途から離れてしまったものを停止・削除しているか。",
            "antipattern1": "ビジネスプロセス全体のボトルネックを計測せずに自動化・効率化を各部門に任せてしまう。",
            "antipattern2": "業務自動化全体のアーキテクチャ設計を行わず、部署個別にRPAなどの自動化ツールを導入する。",
            "antipattern3": "自動化ツールを前提とした組織設計をおこなわず、既存の業務や組織にあわせてツールをカスタマイズする。",
            "desc": "データ駆動経営とは、機械が自動化できることを機械に任せ、人には創造的な仮説の構築や開発などの人にしかできない領域に集中して経営資源を投入することです。\n\nそのためには、作業の単純化だけでなく意思決定も含むビジネスプロセス全体のアーキテクチャ設計が重要な経営上のケイパビリティとなります。"
        }
    ],
    "design": [
        {
            "theme": "design",
            "id": 1,
            "type": "ペルソナの設定",
            "metrics": "少なくとも１つの大きな事業仮説に対して、対応する１つ以上のペルソナが作成されているか。",
            "learning": "事業、製品のペルソナについて、データや仮説検証で学習したことを受けて定期的に見直しているか。",
            "practice1": "ペルソナを記述した資料は、施策会議のたびに意識され、参照されているか。",
            "practice2": "ペルソナについて、チームで繰り返し議論されイメージの共有化をしているか。",
            "practice3": "B2Bなど顧客における関係者が複数人いる場合、購買プロセスの各担当者など、意思決定に関わるの人物の数だけ必要なペルソナを作っているか。",
            "antipattern1": "ペルソナの具体的なライフストーリーが欠如しており、仮説検証のために必要な打ち手につながらない。",
            "antipattern2": "ペルソナが個別的過ぎて、サービスの顧客セグメントへの代表性が薄い",
            "antipattern3": "ユーザーインタビューなしに勝手なイメージでペルソナを作っている。",
            "desc": "製品を使ってくれる顧客の具体的なイメージを共有するためにペルソナという仮想の人格を定義するという手法があります。\n\nペルソナを用いることで、チームの議論が活発になり、エンジニアやデザイナーの事業理解も進みやすくなり、より高速な開発や価値のある開発が可能になります。"
        },
        {
            "theme": "design",
            "id": 2,
            "type": "顧客体験",
            "metrics": "顧客に対してNPS（ネットプロモータースコア）や満足度を継続的に測定しているか。",
            "learning": "顧客からの問い合わせ返信までのリードタイム、問い合わせおよび回答への満足度について定量計測を行い、目標管理しているか。",
            "practice1": "構造化されたヘルプページがあり、ヘルプに書かれたことの品質を改善するために顧客がフィードバックすることが可能か。",
            "practice2": "CRM(顧客管理システム)、SFA(営業支援システム)を導入しており、お問い合わせや行動履歴を把握できているか。",
            "practice3": "顧客が価値を感じるまでの感情的な動きやチャネルを分析したカスタマージャーニーマップを作成しているか。",
            "antipattern1": "カスタマーサポートなど顧客接点となるスタッフから、課題の吸い上げができていない。",
            "antipattern2": "電話やメールでの対応に対して、柔軟な対応をしすぎてしまい自動化の阻害要因になっている。",
            "antipattern3": "顧客体験の向上のための担当エンジニアリングチームが存在せず、システム化や自動化による改善ができていない。",
            "desc": "顧客からの問い合わせに対する効率的なマネジメントは、サブスクリプションや継続率を重視するサービス型の事業にとっては短期の売上以上に経営インパクトのある指標です。\n\nそのため、顧客の行動履歴から重要なインサイトの発見や満足度の向上にどれだけ投資できているかはデジタル化のインジケータになります。"
        },
        {
            "theme": "design",
            "id": 3,
            "type": "ユーザーインタビュー",
            "metrics": "ユーザーインタビューによって見つけた課題と、実際にリリースした対策と効果について記録しているか。",
            "learning": "直近、半年以内になんらかのユーザーインタビューを行っているか。",
            "practice1": "ユーザーインタビューの実施のための稟議やフローは軽量で、一ヶ月以内に行うことができるか。",
            "practice2": "インタビュー結果のインサイトをまとめて、共感マップなどを作成しているか。",
            "practice3": "対象となる潜在顧客がリラックスした状態でインタビューを行うことができるように、専用のインタビュースペースを用意できているか。",
            "antipattern1": "ユーザーインタビューに関して訓練を受けていないスタッフが実施しており、仮説に対して誘導的すぎたり、クローズドクエッションが多くなったりしている。",
            "antipattern2": "顧客接点になっている部門が、ユーザインタビューを実施させてくれない。",
            "antipattern3": "潜在顧客よりも既存顧客を対象にしたユーザーインタビューに偏ってしまい、潜在的な顧客のペインを捉えられない。",
            "desc": "顧客の隠れたニーズや、課題の感覚を拾い上げて数字になかなか現れない事業仮説を構築するというのは、とても難しい創造的な工程です。\n\nそれを補助するためには、専門的な知見と実際のインタビュー接点を持ち続けることは必要不可欠な事業ケイパビリティになります。"
        },
        {
            "theme": "design",
            "id": 4,
            "type": "デザインシステムの管理",
            "metrics": "デザインシステムを用いて、デザイナーの介在なしにフロントエンド開発の５割以上が達成できている。",
            "learning": "デザインシステムを、完全で網羅的なものを作ろうとせずに継続的に再利用しメンテナンスしていくことができているか。",
            "practice1": "プロダクトに関わるUIパーツは、動作するライブラリとしてまとめられているか。",
            "practice2": "UIデザイナーが作成したデザインをソースコードに自動的に反映するためにツールを利用しているか。",
            "practice3": "プロダクトに関わるUIパーツには、OOUIなどの抽象的な情報設計に基づいた共通のポリシーがあり、それらがドキュメント化されているか。",
            "antipattern1": "フロントエンド開発とバックエンドが密結合しており、APIモックサーバーなどを用いて、バックエンド開発と並行して開発をすすめることができない。",
            "antipattern2": "各プラットフォーム（iOS/Android/Web）などで過度に統一の体験を設計しようとしすぎてしまい、それぞれの流儀にそぐわないUIになってしまっている。",
            "antipattern3": "各画面やパーツごとに組み込まれた細やかなアニメーションや音、振動、トランジションといった動きのあるUI要素がガイドラインに組み込まれていない。",
            "desc": "UIデザイナーとフロントエンドエンジニアの連携の良さは高速なアプリケーション開発にとって重要な要素です。\n\nまた、フロントエンドエンジニアとバックエンドエンジニアの連携のしやすさも課題になります。このようにデザインの反映も自動化していくというサイクルが質を生み出していきます。"
        },
        {
            "theme": "design",
            "id": 5,
            "type": "デザイン組織",
            "metrics": "人数ベースで、内製のUI/UXデザイナーがデザインリソースの過半数を占めているか。",
            "learning": "デザイン組織のリーダーは、自社戦略に必要なデザイナーの人事戦略として立案しており、採用・育成についての権限と責任を負っているか。",
            "practice1": "全社のクリエイティブや顧客体験デザインを担う専門知識を持った経営幹部がいるか。",
            "practice2": "内製のデザイン組織を持ち、内製化すべきスキルと外部の専門家集団を利用するガイドラインを持っているか。",
            "practice3": "事業責任者は顧客体験やデザイン思考のトレーニングを受けているか。",
            "antipattern1": "デザイナーがプロジェクトを横断して派遣され、兼務が多くなったり、関わる期間が短くなるため、各プロダクトにおけるユーザへの共感や事業価値の理解が弱くなっている。",
            "antipattern2": "デザイナーが、個別のプロダクトや事業チームごとに配置されるようになり、高速にフィードバックを回すことができるが孤独感やキャリアについて不安を感じている。",
            "antipattern3": "デザイナーが事業の意思決定に関わることができるフェーズが遅いため、カスタマージャーニー全体に対する価値が発揮しづらい。",
            "desc": "デザイナーは、開発者と同じように、希少な人員になるがゆえには、プロジェクトやサービスの専任ではなく、兼務や時間的・心情的なコミットメントが成約されやすい職種です。\n\n一部の工程だけではなく、全体の工程に溶け合うように関わることで相互理解がうまれ、デザインの専門性を事業に反映しやすくなります。"
        },
        {
            "theme": "design",
            "id": 6,
            "type": "プロトタイピング",
            "metrics": "少なくとも毎月１つ以上の戦略仮説に向けたサービスプロトタイプを作成しているか。",
            "learning": "実際の製品貢献が小さくとも、経営幹部含めて一年に一度以上の頻度で小さなチームでプロトタイプづくりのワークショップを行っているか。",
            "practice1": "ある課題の発散のフェーズでは、プロトタイプは極端な仮説に基づいて複数個つくられているか。",
            "practice2": "デザイナーやプロダクトオーナーはプロトタイピング専用ツールを使うことができるか。",
            "practice3": "作ったプロトタイプは、一度破棄してから製品用の設計を行っているか。",
            "antipattern1": "プロトタイプを作るために、プレゼンや大きな稟議が必要になり、プロトタイピングの前に頓挫することが多い。",
            "antipattern2": "プロトタイピングに製品版の完成度を求めてしまう。(プロトタイプはどれだけ雑に仮説検証が達成できるかが重要である。)",
            "antipattern3": "一度のプロトタイピングで、中止や製品化を判断してしまう。",
            "desc": "マーケットの不確実性の高い現在では、サービスや製品を完成させてから評価する手法は不向きです。\n\n一度、中核価値の部分だけを雑に作成し、それを評価し直して、再度完成品を作り直すというサイクルが重要になります。\n\n失敗をできるかぎり早めるためにどのような投資をしているかをチェックします。"
        },
        {
            "theme": "design",
            "id": 7,
            "type": "ユーザビリティテスト",
            "metrics": "ユーザビリティに関するパフォーマンステストを行い、継続的または周期的にトラッキングしているか。",
            "learning": "新規・既存顧客について継続的にユーザビリティの変化がないか示すメトリクス（タスクの成功率など）を計測し、それをもとに改善をこなっているか。",
            "practice1": "重要機能のタスク成功率/タスク実施時間/学習効率などを計測しているか。",
            "practice2": "実際のリリース後も入力エラーやタスク時間などを計測しているか。",
            "practice3": "自己申告メトリクスなどを用いて、印象を含めた満足度のテストをおこなっているか。",
            "antipattern1": "ユーザー調査（何が課題かの発見）とユーザビリティテスト（使い心地が良いか、どのような印象を抱いたか）を区別せずに同時に行ってしまう。",
            "antipattern2": "事業KPIとの関連の薄い些細な項目ばかりに時間を使ってしまう。",
            "antipattern3": "３名以下の少なすぎるユーザビリティテスト対象者の結果に振り回されてしまう。",
            "desc": "顧客の使い勝手の評価を、数値的に裏付けを持って改善することで、思い込みをもってしまいやすいデザインの分野においても数値による評価を行うことができます。\n\nユーザー調査と異なり、ニーズの検証ではなく。ある程度動作する製品やプロトタイプに対しての使いやすさ・使いごこちを評価していきます。"
        },
        {
            "theme": "design",
            "id": 8,
            "type": "プロダクトマネジメント",
            "metrics": "権限を持ったプロダクトマネージャという役職が存在し、１サービスに専任の１名以上が任命されているか。",
            "learning": "幹部人材に対して、プロダクトマネジメントのスキルについての継続的な学習機会を提供できているか。",
            "practice1": "プロダクトへの要求をユーザーストーリーなど開発チームと合意したバックログアイテムの単位で明文化し、その優先順位をつけることができているか。",
            "practice2": "事業フェーズに応じて、プロダクトマーケティングや詳細な要求分析、UX評価など適切な分業体制を引くことができているか。",
            "practice3": "プロダクトビジョンや仮説をバリュープロポジションキャンバスや、仮説キャンバスなどで明文化した上で機能定義を行っているか。",
            "antipattern1": "プロダクトマネージャがソフトウェアプロダクト開発やデザインに関する知見や関心が薄く、チームの関係性が悪化している。",
            "antipattern2": "プロダクトマネージャーとビジネスプロセスやマーケット部門との関係性が薄く、それ起因による実運用によるトラブルが、ほぼ毎回発生している。",
            "antipattern3": "プロダクトマネージャという役割に予算執行の権限と責任がない。",
            "desc": "プロダクトマネージャという役職は、プロジェクトマネージャとは異なり、継続的に顧客と繋がり続けるようなサービスのビジョン、仕様決定、マーケティングまでを行うような専門職です。\n\n事業に応じて、多様な専門性と直感が必要になるため、育成の支援とフォローしあえる体制構築が鍵となります。"
        }
    ],
    "corporate": [
        {
            "theme": "corporate",
            "id": 1,
            "type": "スパン・オブ・コントロール",
            "metrics": "スパン・オブ・コントロールの基準を(最低4名-最大10名など)設けており、それに外れた部門数などをモニタリングしているか。",
            "learning": "兼務及びスパン・オブ・コントロールの基準が適切になるように、定期的に改善が行われているか。",
            "practice1": "人事制度上、管理職位の設定は人事考課上の等級と独立して設置されるようになっているか。（部長職じゃないと、この給与にならないといったような職位と等級が一致するものでないか。）",
            "practice2": "どのメンバーにとっても業務的な命令を行う上司は１名か。（その原則が崩れているメンバーを列挙して把握しているか。マトリクス組織であっても指揮系統は１つであるか。）",
            "practice3": "行っている業務と管理部門の役割が一致するように部門のミッションステートメント（業務分掌）を明確に決めて全社に公開しているか。",
            "antipattern1": "人事評価者と指示を行う者の不一致がある組織になっている。または、一致するかの確認ができていない。",
            "antipattern2": "部下なしもしくは１名の管理職が存在する。",
            "antipattern3": "組織のガイドラインが存在しない、もしくはガイドラインが存在していても例外が常態化している。",
            "desc": "スパン・オブ・コントロールとは、一人あたりが管理する人数のことです。\n\n平均的にこの人数が多いほど、マネージメントは難しくなり、組織としての統制は取りづらくなります。また、小さすぎても組織が階層的になりすぎてしまいます。\n\nこれを適正に保つ方法があるかをチェックします。"
        },
        {
            "theme": "corporate",
            "id": 2,
            "type": "開発者環境投資",
            "metrics": "プロダクト開発に関係する全ステークホルダーに、自社のIT環境の満足度やeNPS℠を測定しているか。",
            "learning": "働く環境について、事業競合や採用競合ともコミュニケーションする機会を意識的に持ち、従業員の満足度において常に改善を繰り返しているか。",
            "practice1": "開発者(およびデザイナー)は、職務遂行に十分なスペックの開発マシンを貸与されているか。(開発マシンは、開発者からのアンケートなどを通じて満足が確認されているか。）",
            "practice2": "従業員が作成したソフトウェアライブラリを、自社のOSSまたは個人のOSSとして公開するためのガイドラインを準備しており、何らかソフトウェアを公開しているか。",
            "practice3": "オフィス内のWi-Fi速度は安定して20Mbpsを超えており、人数規模に十分なキャパシティを持っているか。",
            "antipattern1": "ソフトウェア開発作業を行う場所で、自由にインターネットを使うことができない。（たとえば、SNSをつかわせないなど）",
            "antipattern2": "障害対応など予測の困難な業務や、輪番対応等の計画された定時外業務があっても、定時に会社に出勤することを求めている。",
            "antipattern3": "従業員は自身のパソコンへの自由なソフトウェアのインストールを過度に制限されている。",
            "desc": "ソフトウェア開発者やデザイナーなどの創造的な仕事を行う必要があるメンバーにとって、パソコンおよび周辺機器は重要な仕事道具です。\n\n自由にカスタマイズでき、先端のソフトウェアが快適に動作する環境がなければ、高い生産性は発揮しづらくなります。"
        },
        {
            "theme": "corporate",
            "id": 3,
            "type": "コミュニケーションツール",
            "metrics": "チャットツールにおける全社員が閲覧可能な状態でのコミュニケーションの割合を測定しているか。",
            "learning": "ここ１年以内に管理職以上で、「コミュニケーションの透明性向上」を目的とした対策を検討し実施したか。",
            "practice1": "チャットサービスは全社で同一のサービスが導入され、チャットを通じた業務上の手続きの自動化(ChatOps)が可能か。",
            "practice2": "社内ナレッジの管理のために、大多数の従業員が気軽にwebベースの文書が作成できる、Wikiサービス等を導入しているか。",
            "practice3": "各部門は、自部門の仕事をメールベースではなくチケットツールベースで受け取る環境があるか。",
            "antipattern1": "各種ミーティングにおいて、オンラインでアクセスできる共通の議事録をとっていない。",
            "antipattern2": "意思決定者や管理者がチャットツールにログインしておらず、コミュニケーションが取れない。",
            "antipattern3": "チャットツールを通じた雑談を禁止している。または雑談をやめるように注意喚起を促したことがある。",
            "desc": "ソフトウェア開発はコミュニケーション効率が悪いと途端に遅くなってしまいます。\n\nそのため、気軽に発信・質問ができたり、作業依頼や完了の記録を残していく仕組みの使いやすさは、とても重要な生産性の基盤になります。\n\nこれらが適切に導入されているかをチェックします。"
        },
        {
            "theme": "corporate",
            "id": 4,
            "type": "人事制度・育成戦略",
            "metrics": "理想的な自社従業員のスキルセット構成から逆算した採用・育成計画が中長期の計画として定義されているか。",
            "learning": "全社員のスキルセットやキャリアを管理しているタレントマネジメントシステムを導入していて、データと計画をアップデートしているか。",
            "practice1": "プロダクト開発に関わる従業員一人あたり年間12万円(月額1万円)以上の教育研修予算があるか。",
            "practice2": "専門職向けのジョブ型人事制度があり、管理職と同等かそれ以上の給与で従事しているメンバーが存在するか。",
            "practice3": "リモートワークやフレックスタイムなどの柔軟な働き方を導入しているか。",
            "antipattern1": "高度な専門人材に対して、市場変化を考慮した年収額のアップデートができない人事制度になっている。",
            "antipattern2": "自己学習のための書籍や、オンライン学習の補助手当がない。",
            "antipattern3": "新入社員向けカリキュラムが、自社内でしか通用しないノウハウ、知識に特化したものになっている。",
            "desc": "新しい知識やツールを常に学習し続けることが求められるソフトウェアエンジニアにとって、そのための支援と評価制度はこれまで以上に重要になります。\n\nまた、転職が当たり前の職種ですので、自社での仕事が他社においてもキャリアになることへの投資に対して強い関心があります。この点について調査します。"
        },
        {
            "theme": "corporate",
            "id": 5,
            "type": "デジタル人材採用戦略",
            "metrics": "ソフトウェアエンジニアの採用活動を常に行っており、毎年十分なペースでソフトウェアエンジニアを採用できているか。",
            "learning": "採用管理システムが導入され、採用に関わる全てのステップ、チャネルからの情報が遅滞なく不足なく集約されているか。",
            "practice1": "候補者の方との初回面談から、オファーまでのリードタイムを目標とともに管理しているか。（長すぎる選考プロセスは、人材獲得の妨げになる。）",
            "practice2": "採用したい人材の基準を明確化したJob Description（求人票）が存在し、現場エンジニアとともに表現を見直すためのワークフローが整備されていて、直近一ヶ月以内に更新されているか。",
            "practice3": "中途採用におけるリファラル採用（社員からの紹介による採用）の比率が全体採用数の30%を超えているか。",
            "antipattern1": "採用部門が行使可能な予算金額が年間採用目標人数の年収合計に対して25%以下しかないまたは予算計画が存在しない。",
            "antipattern2": "「募集職種：Webエンジニア」のように曖昧な表現しかされておらず、どのようなスキルやキャリアが求められているのかの解像度が低い。",
            "antipattern3": "経営や幹部人材が、人材採用に対して責務を負っておらず十分な時間と熱量を費やしていない。",
            "desc": "ソフトウェアエンジニアに限らず、デジタル人材の獲得は、デジタル化には必要不可欠です。\n\nしかし、新卒一括採用を重視する企業においては、中途採用の戦略や基礎的な知識に欠けることも珍しくありません。\n\n経営レベルでの採用コミットが、自社の高速なDXを促進することになります。"
        },
        {
            "theme": "corporate",
            "id": 6,
            "type": "モダンなITサービスの活用",
            "metrics": "従業員の情報システムへの満足度と利用度、申請から承認などのリードタイムなどの指標を継続的に測定し、改善に生かしているか。",
            "learning": "SaaS間の自動連携を目的としたサービス(iPaaSやLow Code系ツールなど)を導入しており、業務の自動化や効率化をするためのBPR活動を事業部主体で実行しているか。",
            "practice1": "業務に合わせて社内のシステム開発を行うのではなく、デファクトなSaaSなどの利用を行い、そのツールに業務自体をフィットさせているか。",
            "practice2": "表計算やプレゼン資料などはすべてクラウド上で共同編集できるようになっているか。",
            "practice3": "自身のスマートフォン、または貸与されたスマートフォンを用いて、会社の予定・メール・コミュニケーションツールなどを利用することができるか。",
            "antipattern1": "決裁書類がワークフローツールだけで完結しない。",
            "antipattern2": "古いバージョンのOSやブラウザでしか動作しないツールが使われている。",
            "antipattern3": "業務で利用しているシステムにシステム間連携を目的としたAPIが用意されていない。",
            "desc": "IT人材を戦略的に活用するためには、よりコモディティ化していない領域に集中することが最も重要です。\n\nそのために、外部企業が継続的に改善してくれるであろうSaaSの利用は、非常に合理的な選択肢です。\n\n一時的なコストの問題から、自社のIT人材を浪費していないかをチェックします。"
        },
        {
            "theme": "corporate",
            "id": 7,
            "type": "経営のデジタルファースト",
            "metrics": "データとデジタル技術を用いて、どのように事業変革をしていくのかのビジョンを明文化して経営メッセージとして発信し、その推進経営指標をもっているか。",
            "learning": "ソフトウェアエンジニアとしての業務経験のあるCTOないし技術担当取締役が存在し、技術戦略についての策定を主導的に行っているか。",
            "practice1": "デジタル技術を活用した経営変革を担う担当役員（CDO等）が存在するか。",
            "practice2": "自社システムの戦略(競争領域・非競争領域の定義)を明確化しており、競争領域のプロダクト開発を内製人材でコントロールできているか。",
            "practice3": "デジタル事業および人材獲得に向けたM&A・投資戦略を遂行するための部隊が存在するか。",
            "antipattern1": "IT予算の過半をソフトウェア資産として計上し、予算決裁のためにリードタイムの長い（１ヶ月以上かかるような）意思決定フローを挟んでいる。",
            "antipattern2": "継続的なシステム改善のためのプロダクトマネジメント経験者がいない。そのため、開発チームとの関係が受発注構造になっている。（情報子会社問題）",
            "antipattern3": "競争領域ではないシステムについて、業務フローをSaaSに合わせて変更するのではなく、既存の業務フローに合わせてパッケージソフト等をカスタマイズしている。",
            "desc": "最新の技術動向から事業に必要で実践可能な技術戦略を策定することは、専門的な知見と高度な事業理解なしではできません。\n\nまた、それを実行するためのCTOやCDOといった経営レベル権限を持った人材がドライブしていかないと現場は改革が実行できずにどんどん疲弊してしまいます。このための、経営的なケイパビリティを調査します。"
        },
        {
            "theme": "corporate",
            "id": 8,
            "type": "攻めのセキュリティ",
            "metrics": "セキュリティ担当者の人事評価における評価基準に事業や従業員の生産性改善が組み込まれているか。",
            "learning": "社内のセキュリティ担当者が、近年のセキュリティ動向やシフトレフトについて理解し、事業部門とともに開発リードタイムや生産性の改善のために必要な措置をおこなっているか。",
            "practice1": "インシデントレスポンスチームが、社内の専門家と事業責任者を含むチームにより構成されていて、インシデント時の予行練習をおこなっているか。",
            "practice2": "境界防御モデルではなく、ゼロトラストモデルのセキュリティネットワークを構築しているか。",
            "practice3": "セキュリティの意思決定は、定期的に行われているリスクアセスメントにともない、リスクとリターンを定量的に評価した上で行われているか。",
            "antipattern1": "管理・監視できない領域のITサービスの利用が行わていること(シャドウIT)に対して対策が打てていない。",
            "antipattern2": "\"パスワードを定期的な変更を強制する\"、\"メールでのファイル添付でパスワード付きZIP形式で添付し、別途パスワードを送る\"などの現在ではセキュリティ価値が低いとされるルールが残っている。",
            "antipattern3": "従業員および経営幹部に対しての最新のトレンドなどが取り入れたセキュリティ教育がなされていない。",
            "desc": "情報セキュリティは、安全性と利便性を同時に実現するには、専門的な知見と最新技術のアップデートが必要不可欠になります。\n\n最新動向を追いかけつつ、従業員の生産性や創造性に寄与する攻めのセキュリティは、イノベーションの源泉になる戦略投資です。"
        }
    ]
}
